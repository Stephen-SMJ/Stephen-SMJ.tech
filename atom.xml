<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小孙不够睡的博客</title>
  
  <subtitle>MyBlog</subtitle>
  <link href="https://stephen-smj.tech/atom.xml" rel="self"/>
  
  <link href="https://stephen-smj.tech/"/>
  <updated>2024-08-10T08:54:06.778Z</updated>
  <id>https://stephen-smj.tech/</id>
  
  <author>
    <name>Sun Maojun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经验分享-应届生如何在秋招拿下多个年薪50w的offer</title>
    <link href="https://stephen-smj.tech/2024/08/01/%E7%A7%8B%E6%8B%9B%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <id>https://stephen-smj.tech/2024/08/01/%E7%A7%8B%E6%8B%9B%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</id>
    <published>2024-08-01T07:49:26.000Z</published>
    <updated>2024-08-10T08:54:06.778Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间25届的秋招提前批已经开始啦，不禁让我想起了去年这个时间段边实习边秋招边完成毕业论文的煎熬。一直坚持到12月份之后感觉整体结果还是满意的。我同时参加了大陆的秋招和香港小部分公司的招聘（因为感觉香港没有分春秋招，全年可投），拿到的offer情况如下：</p><h3 id="大陆"><a href="#大陆" class="headerlink" title="大陆"></a>大陆</h3><p>投递了300多家公司，拿到多个互联网公司以及新能源公司的算法岗以及开发岗的offer。其中一个SSP，一个SP。</p><ol><li>SP来自国内某电商中偏大厂，AI开发工程师，给出x*16薪 + (房补+餐补)*12的offer总包刚好50w。</li><li>SSP来自国内某新能源Top1，大语言模型算法工程师，给出((x-8)*12) * 2的offer，比上一个差一些。（感觉是赶上风口了, 之前没想过自己能拿到纯算法岗的offer）</li></ol><p>还有一些其他互联网，能源，通信公司的offer相对这两个给的就很少，基本听到报价就直接拒了。</p><h3 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h3><ol><li><p>本地政府机构实习转正，给出（x-2）* 12 + 合同完期的bonus （两年总包*15%）。了解下来算是在香港本地公司里算比较高的了，但是跟大陆比还差一截。是的你没听错，<br>在寸土寸金的生活费巨高的香港给应届生的工资还不如大陆（It是这样的，其他行业感觉还是香港高一些）。</p></li><li><p>刚好赶上大陆某个Top1招聘行业的互联网公司出海，NLP算法岗，给出(x+1) * 14的总包，42w港币，后来我发现北京的总部也能拿到这个数的RMB。<br>后面问Hr，香港的生活成本比北京高多了，而且香港发的还是港币，相对发rmb的北京以后可能还要打八折，这么一算比北京还要少。Hr回复是根据香港本地It行情+30%来定价的<br>无异于再次证明了香港程序员的工资相对其他行业并不突出。其实我拿到这个offer的时候是想留下来的，但后来因为argue package搞得很不愉快，最终散是满天星了。</p></li></ol><p>后来偶然的机会让我选择了读博，于是乎就放弃了这些offer，感觉还是挺可惜的，毕竟大陆的互联网一年不如一年，现在还能喝口风口末期的汤，有朋友劝我说搞不好我博士毕业回去还不如硕士毕业拿得多，我也觉得有这种可能，但是能遇到一个欣赏我的Phd supervisor也是千载难逢。最后跟家人商量下来，还是觉得继续读书了。</p><h2 id="秋招准备经验分享"><a href="#秋招准备经验分享" class="headerlink" title="秋招准备经验分享"></a>秋招准备经验分享</h2><p>我在秋招总结出来了一套自己的准备方法，我觉得这个方法还是效率挺高的，分享出来希望能帮助到大家。</p><h3 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h3><p><img src="https://gist.github.com/user-attachments/assets/8c385ee2-c9d8-41ff-9aba-16de0603aad0" alt="image"></p><p>首先最基本的任务就是刷题了，互联网基本在3-6轮面试左右，前4轮基本每一轮都要当场手撕代码，写题大多是在牛客上，所以我后来觉得先刷LeetCode很不明智。于是从9月份开始我基本就只刷牛客上了，注意，LeetCode跟牛客的提交方式还是有很大差距，LeetCode是核心代码模式，不用自己写提交函数。而牛客是ACM模式，需要完整的代码。建议刚准备的同学可以先在LeetCode上刷一下常见题型，因为LeetCode比牛客要全一些，而且分类整理的更好。如果准备时间不够充分，就刷<a href="https://leetcode.cn/studyplan/top-100-liked/">hot100</a>。然后多去牛客上刷题，主要是为了熟练ACM模式的规则。整体上刷300道左右，面试写代码这一关通过率就很高了。</p><h3 id="八股文准备"><a href="#八股文准备" class="headerlink" title="八股文准备"></a>八股文准备</h3><p>技术面的第一个环节要么是写题，要么是八股文，题目没写出来八股文回答的好可能还能拯救一下，那么如何准备八股文呢。我的方法是自己整理一个跟自己用到的技术息息相关的文档，比如你简历里写了你熟练使用java，那面试官大概率会问你java里的锁机制，多线程，I/O，jvm等等（现在比较卷了，基础的继承，封装，多态这些基本不会再问了），大厂会问的特别深，很多问题必须看过源码才能回答上来，比如腾讯二面当时问我乐观锁和悲观锁有哪些，机制分别是什么样的，在我回答完synchronized锁之后又立马追问我synchronized锁是如何实现的。这些问题是背不完的，并且我觉得死记硬背也没意义，所以我建议应届生的简历里尽量不要用“精通”“熟练掌握”这些个词语，很多面试官自己都不敢这么写，看到你这么写之后就会有竞争心里，一定要问到你答不出来为止。再比如你简历里写了你懂计算机网络，那么面试官一定会问你TCP/UDP的通信过程，握手细节，http，https，websocket等协议的区别，拥塞控制和流量控制是如何实现的等等。<br><strong>所以简历里写到的所有技术的八股文一定要了解原理，不能只会用。</strong> 如果简历里写了却答不出来就会很扣分，并且会很尴尬。<br>这里我有一个小tips：<br>如果准备的时间不够充分，一定要把自己熟悉原理的技术放在前面，这样就可以起到吸引火力的作用，一般八股文这个环节就15分钟左右，问不了太多的问题。</p><h3 id="我所了解到的岗位需要准备的知识"><a href="#我所了解到的岗位需要准备的知识" class="headerlink" title="我所了解到的岗位需要准备的知识"></a>我所了解到的岗位需要准备的知识</h3><ul><li>后端开发岗必会：一个编程语言（一般是java或者go），数据结构，计算机网络，数据库（一般是MySQL）。</li><li>后端开发岗锦上添花（想在池子中排名靠前必会）：一个开发框架（SpringBoot，SpringCloud等），缓存数据库（Redis，MongoDB等）, 消息中间件（RabbitMQ，Kafka等等）。如果简历里写了这些，前面基础的问题可能就随便问一两个了。</li><li>前端开发岗必会（略微准备了一些，但没投过）：html，css，js三组件，一个开发框架（Vue或React），计算机网络。</li><li>算法岗必会：Pytorch/TensorFlow，你研究领域的常见算法，如做CV的必须会CNN以及一些变体，做NLP的必须精通Transformer，还有一些机器学习的算法原理，要能够很深入的回答出来某些结构为什么好为什么不好，比如序列任务中为什么batch normalization效果不好，以及某某损失函数在某个场景下为什么比其他好。</li><li>算法岗锦上添花：你这个领域近些年引用量比较高的论文里提出的方法得口到擒来，其次有个非常加分的点：了解一些工程性的技术，因为互联网大多部门的算法岗大部分工作其实在工程实现上，如果懂一些算法部署框架如Flask，加速框架如TensorRT等等会比较加分，能拿到SP的基本要求。</li></ul><h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><p>现在互联网比较卷了，大家基本都有多段实习，如果学历特别好只有一段拿得出手的实习就行。我准备项目的时候是这样准备的：<br>首先把你简历里所有项目经历放在一个文档里，比如Markdown，接下来对每一段项目经历总结以下几个点：</p><ol><li>技术原理：项目中用到的所有相关技术的八股文一定要非常了解。</li><li>复习项目：复习项目中的所有代码实现。如果没有代码了怎么办：至少能用一个非常通顺切合理的逻辑去把这个项目的实现过程复述一遍。</li><li>项目反问：反思项目中所有可能会被面试官问到的点。</li><li>项目贡献：最好能总结出来你在这段项目中带来了哪些贡献，比如系统的QPS经过你优化之后提升了多少多少，再比如高并发场景下你如何优化数据一致性问题。</li><li>改进方法：在你讲完你的项目之后，面试官可能还会追问针对你提到的某一个点，你还有没有改进的办法，所以提前把这些问题想好到时候就不会慌乱了。</li></ol><p><strong>尤其是第3点至今都让我觉得受益匪浅，我当时会不停的思考，我讲到任何一点的时候面试官都可能会打断我并且提出问题，那么我如何回答这个问题能让面试官非常满意。</strong></p><h4 id="这里给一些我当时整理的文档的截图，总共整理了10w多个字："><a href="#这里给一些我当时整理的文档的截图，总共整理了10w多个字：" class="headerlink" title="这里给一些我当时整理的文档的截图，总共整理了10w多个字："></a>这里给一些我当时整理的文档的截图，总共整理了10w多个字：</h4><h4 id="比如一个大模型的项目中："><a href="#比如一个大模型的项目中：" class="headerlink" title="比如一个大模型的项目中："></a>比如一个大模型的项目中：</h4><div style="width: 70%; text-align: center; margin: 0 auto"><img src="https://gist.github.com/user-attachments/assets/2820ed3d-0add-49d6-bc5c-3264ce61b8ae"><img src="https://gist.github.com/user-attachments/assets/fb0b819a-2480-4d26-8818-868743e6a010"></div><h4 id="再比如一个视觉算法的项目中："><a href="#再比如一个视觉算法的项目中：" class="headerlink" title="再比如一个视觉算法的项目中："></a>再比如一个视觉算法的项目中：</h4><div style="width: 70%; text-align: center; margin: 0 auto"><img src="https://gist.github.com/user-attachments/assets/fc3b4754-c506-4ce1-9950-45d33a225fb9"><img src="https://gist.github.com/user-attachments/assets/9e62360b-85ae-43d8-b98f-60a6a713ceb3"></div><h4 id="再比如一个开发的项目中："><a href="#再比如一个开发的项目中：" class="headerlink" title="再比如一个开发的项目中："></a>再比如一个开发的项目中：</h4><div style="width: 70%; text-align: center; margin: 0 auto"><img src="https://gist.github.com/user-attachments/assets/d2311966-b905-4ce5-8ce2-725827dfa555"></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是针对项目中的一些八股文和问题整理的回答思路。不需要整理的很规范，自己能看懂就行，节省时间用来投递最重要。<br>最后吐槽一下秋招投递：每一家公司要填的信息非常多，而且都是手填，有些插件效果也不太好，还是要自己调整，我最后就准备了一个专门用来投递的文档，把信息直接复制上去，不过还是很花时间，平均投递一家公司要20分钟。那么投递300家公司就是6000分钟，我当时秋招就差不多是这个数，后来因为有offer了且打算读书了，春招就直接放弃了。</p><h4 id="最后祝愿大家都能顺利上岸，拿到满意的Package！"><a href="#最后祝愿大家都能顺利上岸，拿到满意的Package！" class="headerlink" title="最后祝愿大家都能顺利上岸，拿到满意的Package！"></a>最后祝愿大家都能顺利上岸，拿到满意的Package！</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转眼间25届的秋招提前批已经开始啦，不禁让我想起了去年这个时间段边实习边秋招边完成毕业论文的煎熬。一直坚持到12月份之后感觉整体结果还是满意的。我同时参加了大陆的秋招和香港小部分公司的招聘（因为感觉香港没有分春秋招，全年可投），拿到的offer情况如下：&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="Experience" scheme="https://stephen-smj.tech/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>Achieve Function Calling and Tool Use in Large Language Models</title>
    <link href="https://stephen-smj.tech/2024/04/24/Function%20Calling%20c635408fcd35420d91ac76b97400d9a6/"/>
    <id>https://stephen-smj.tech/2024/04/24/Function%20Calling%20c635408fcd35420d91ac76b97400d9a6/</id>
    <published>2024-04-24T10:02:21.000Z</published>
    <updated>2024-07-26T09:40:18.158Z</updated>
    
    <content type="html"><![CDATA[<p>This article will tell you how to achieve a function calling ability in Large Language Models (LLM) and how to use the function in the LLM.</p><p>Implementation architecture: Client + Service</p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>User Input: Query + Function Description (system)<br>Example:<br>Query: Show 5 rows of data.<br>Function Description:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">   &quot;name&quot;: &quot;show_data_head&quot;,</span><br><span class="line">   &quot;description&quot;: &quot;Show top n row of data.&quot;,</span><br><span class="line">   &quot;parameters&quot;: &#123;</span><br><span class="line">       &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">       &quot;properties&quot;: &#123;</span><br><span class="line">       &quot;row&quot;: &#123;</span><br><span class="line">           &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">           &quot;description&quot;: &quot;number of rows to show.&quot;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">....</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Use React Template:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;Answer the following questions as best you can. You have access to the following APIs:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;tools_text&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use the following format:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: the input question you must answer</span></span><br><span class="line"><span class="string">Thought: you should always think about what to do</span></span><br><span class="line"><span class="string">Action: the action to take, should be one of [&#123;tools_name_text&#125;]</span></span><br><span class="line"><span class="string">Action Input: the input to the action, if no parameters are provided, marking this as empty.</span></span><br><span class="line"><span class="string">Observation: the result of the action</span></span><br><span class="line"><span class="string">... (this Thought/Action/Action Input/Observation can be repeated zero or more times)</span></span><br><span class="line"><span class="string">Thought: I now know the final answer</span></span><br><span class="line"><span class="string">Final Answer: the final answer to the original input question</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Begin!&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>The {tools_text} is the processed nature langue description of above API description. </p><p>There is an example for processing it to nature langue:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">TOOL_DESC_WITH_PARAMETERS</span> = (</span><br><span class="line">    <span class="string">&#x27;&#123;name_for_model&#125;: Call this tool to interact with the &#123;name_for_human&#125; API.&#x27;</span></span><br><span class="line">    <span class="string">&#x27; What is the &#123;name_for_human&#125; API useful for? &#123;description_for_model&#125; Parameters: &#123;parameters&#125;&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> So, for request above from client. The overall prompt shoud be:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;Answer the following questions as best you can. You have access to the following APIs:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#x27;show_data_head: Call this tool to interact with the show_data_head API. &#x27;</span></span><br><span class="line"><span class="string">    &#x27;What is the show_data_head API useful for? show top n row of data. &#x27;</span></span><br><span class="line"><span class="string">    &#x27;Parameters: &#123;&quot;</span>type<span class="string">&quot;: &quot;</span>object<span class="string">&quot;, &quot;</span>properties<span class="string">&quot;: &#123;&quot;</span>row<span class="string">&quot;: &#123;&quot;</span>type<span class="string">&quot;: &quot;</span>string<span class="string">&quot;, &#x27;</span></span><br><span class="line"><span class="string">    &#x27;&quot;</span>description<span class="string">&quot;: &quot;</span>number <span class="keyword">of</span> rows to show.<span class="string">&quot;&#125;&#125;&#125;\n</span></span><br><span class="line"><span class="string">    ....</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Use the following format:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Question: the input question you must answer</span></span><br><span class="line"><span class="string">Thought: you should always think about what to do</span></span><br><span class="line"><span class="string">Action: the action to take, should be one of [***show_data_head***, ....]</span></span><br><span class="line"><span class="string">Action Input: the input to the action, if no parameters are provided, marking this as empty.</span></span><br><span class="line"><span class="string">Observation: the result of the action</span></span><br><span class="line"><span class="string">... (this Thought/Action/Action Input/Observation can be repeated zero or more times)</span></span><br><span class="line"><span class="string">Thought: I now know the final answer</span></span><br><span class="line"><span class="string">Final Answer: the final answer to the original input question</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Begin!&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Stopword"><a href="#Stopword" class="headerlink" title="Stopword"></a>Stopword</h3><p>If we let the LLM do text generation by the above react prompt directly, the model will predict the text of <em><strong>Observation: the result of the action</strong></em> directly. That isn’t we want. We want the text here is the result by our API. So it is essentially for make model stop generation in Observation.</p><p>We will add additional stop word to model for let it pauses in the stop words.</p><p>Here, we add “Observation” to the stop text.</p><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>We will parse the “Action” above to Json formation to return. We refer the response data of Openai here</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Qwen&quot;</span>,</span><br><span class="line">  <span class="string">&quot;object&quot;</span>: <span class="string">&quot;chat.completion&quot;</span>,</span><br><span class="line">  <span class="string">&quot;choices&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Thought: I need to use the show_data_head API to display the first few rows of the data.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function_call&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;show_data_head&quot;</span>,</span><br><span class="line">          <span class="string">&quot;arguments&quot;</span>: &#123;<span class="string">&quot;row&quot;</span>: <span class="string">&quot;5&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;finish_reason&quot;</span>: <span class="string">&quot;function_call&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;created&quot;</span>: <span class="number">170228275</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API-Calling-Client"><a href="#API-Calling-Client" class="headerlink" title="API Calling(Client)"></a>API Calling(Client)</h2><p>We got the response Json of LLM. Now, we can call the API and passing the parameters according to Json. Then, we will get the result of our API. </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">show_data_head</span>(self, <span class="attr">row</span>: int = <span class="number">5</span>):</span><br><span class="line">    <span class="attr">try</span>:</span><br><span class="line">        #self.<span class="property">message_recorder</span>.<span class="title function_">append</span>(f<span class="string">&quot;&#123;&#125; rows of data: &#123;self.data.head(int(row))&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="property">data</span>.<span class="title function_">head</span>(<span class="title function_">int</span>(row))</span><br><span class="line">    except <span class="title class_">Exception</span> <span class="keyword">as</span> <span class="attr">e</span>:</span><br><span class="line">        <span class="title function_">print</span>(f<span class="string">&quot;Error in show data: &#123;e&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><table><thead><tr><th>Sepal.Length</th><th>Sepal.Width</th><th>Petal.Length</th><th>Petal.Width</th><th>Species</th></tr></thead><tbody><tr><td>5.1</td><td>3.5</td><td>1.4</td><td>0.2</td><td>setosa</td></tr><tr><td>4.9</td><td>3.0</td><td>1.4</td><td>0.2</td><td>setosa</td></tr><tr><td>4.7</td><td>3.2</td><td>1.3</td><td>0.2</td><td>setosa</td></tr><tr><td>4.6</td><td>3.1</td><td>1.5</td><td>0.2</td><td>setosa</td></tr><tr><td>5.0</td><td>3.6</td><td>1.4</td><td>0.2</td><td>setosa</td></tr></tbody></table><p>Importantly, we should add  both of LLM’s response (Json) and  the result of API to message of next request.</p><p>Then, we will call LLM again.</p><h3 id="Second-Response-for-API-Results"><a href="#Second-Response-for-API-Results" class="headerlink" title="Second Response for API Results"></a>Second Response for API Results</h3><p>Note that previously we use template of “chat” for LLM</p><p>But now, we want model do text continuation continuing the “Observation: {result of our API}”. So we should use “completion” template here.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;completion&gt;</span><br><span class="line">&lt;|im_start|&gt;system</span><br><span class="line"><span class="title class_">You</span> are a data scientist, your mission is help human to <span class="keyword">do</span> data analysis, data mining and generate report.&lt;|im_end|&gt;</span><br><span class="line">&lt;|im_start|&gt;user</span><br><span class="line">hi&lt;|im_end|&gt;</span><br><span class="line">&lt;|im_start|&gt;assistant</span><br><span class="line"><span class="title class_">Hello</span>! <span class="title class_">How</span> can I assist you <span class="keyword">with</span> your data analysis, data mining, or report generation? <span class="title class_">Please</span> provide me <span class="keyword">with</span> some details about the data you have and what insights you<span class="string">&#x27;re hoping to gain, and we can get started.&lt;|im_end|&gt;</span></span><br><span class="line"><span class="string">&lt;|im_start|&gt;user</span></span><br><span class="line"><span class="string">show 5 rows of data&lt;|im_end|&gt;</span></span><br><span class="line"><span class="string">&lt;|im_start|&gt;assistant</span></span><br><span class="line"><span class="string">Thought: I need to use the show_data_head API to display the first few rows of the data.</span></span><br><span class="line"><span class="string">Action: show_data_head</span></span><br><span class="line"><span class="string">Action Input: &#123;&quot;row&quot;: &quot;5&quot;&#125;</span></span><br><span class="line"><span class="string">Observation:    Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species</span></span><br><span class="line"><span class="string">0           5.1          3.5           1.4          0.2  setosa</span></span><br><span class="line"><span class="string">1           4.9          3.0           1.4          0.2  setosa</span></span><br><span class="line"><span class="string">2           4.7          3.2           1.3          0.2  setosa</span></span><br><span class="line"><span class="string">3           4.6          3.1           1.5          0.2  setosa</span></span><br><span class="line"><span class="string">4           5.0          3.6           1.4          0.2  setosa</span></span><br><span class="line"><span class="string">Thought:</span></span><br><span class="line"><span class="string">&lt;!-- *** --&gt;</span></span><br></pre></td></tr></table></figure><p>The model will do text continuation from the last Thought:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Thought</span>:</span><br><span class="line">&lt;!-- *** --&gt;</span><br><span class="line"><span class="title class_">The</span> <span class="variable constant_">API</span> has displayed the first <span class="number">5</span> rows <span class="keyword">of</span> the data <span class="keyword">as</span> requested.</span><br><span class="line"><span class="title class_">Response</span>: <span class="title class_">Here</span> are the first <span class="number">5</span> rows <span class="keyword">of</span> the <span class="attr">data</span>:</span><br><span class="line"></span><br><span class="line">|<span class="title class_">Sepal</span>.<span class="property">Length</span>| <span class="title class_">Sepal</span>.<span class="property">Width</span>| <span class="title class_">Petal</span>.<span class="property">Length</span>| <span class="title class_">Petal</span>.<span class="property">Width</span>|   <span class="title class_">Species</span>|</span><br><span class="line">|------------|------------|-------------|------------|----------|</span><br><span class="line">|       <span class="number">5.1</span>|         <span class="number">3.5</span>|          <span class="number">1.4</span>|         <span class="number">0.2</span>|    setosa|</span><br><span class="line">|       <span class="number">4.9</span>|         <span class="number">3.0</span>|          <span class="number">1.4</span>|         <span class="number">0.2</span>|    setosa|</span><br><span class="line">|       <span class="number">4.7</span>|         <span class="number">3.2</span>|          <span class="number">1.3</span>|         <span class="number">0.2</span>|    setosa|</span><br><span class="line">|       <span class="number">4.6</span>|         <span class="number">3.1</span>|          <span class="number">1.5</span>|         <span class="number">0.2</span>|    setosa|</span><br><span class="line">|       <span class="number">5.0</span>|         <span class="number">3.6</span>|          <span class="number">1.4</span>|         <span class="number">0.2</span>|    setosa|</span><br><span class="line">&lt;/completion&gt;</span><br></pre></td></tr></table></figure><p>Finally, parse the response again and return to the client.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This article will tell you how to achieve a function calling ability in Large Language Models (LLM) and how to use the function in the LL</summary>
      
    
    
    
    
    <category term="Deep learning" scheme="https://stephen-smj.tech/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>博客图片被设置防盗链接？我爆肝三晚写了这个批量图片站点转移脚本（已开源）</title>
    <link href="https://stephen-smj.tech/2023/03/21/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%A2%AB%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%9B%97%E9%93%BE%E6%8E%A5%EF%BC%9F%E5%88%AB%E6%85%8C%EF%BC%8C%E6%88%91%E7%88%86%E8%82%9D%E4%B8%89%E6%99%9A%E5%86%99%E4%BA%86%E8%BF%99%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E7%AB%99%E7%82%B9%E8%BD%AC%E7%A7%BB%E8%84%9A%E6%9C%AC%EF%BC%88%E5%B7%B2%E5%BC%80%E6%BA%90%EF%BC%89/"/>
    <id>https://stephen-smj.tech/2023/03/21/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%A2%AB%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%9B%97%E9%93%BE%E6%8E%A5%EF%BC%9F%E5%88%AB%E6%85%8C%EF%BC%8C%E6%88%91%E7%88%86%E8%82%9D%E4%B8%89%E6%99%9A%E5%86%99%E4%BA%86%E8%BF%99%E4%B8%AA%E6%89%B9%E9%87%8F%E5%9B%BE%E7%89%87%E7%AB%99%E7%82%B9%E8%BD%AC%E7%A7%BB%E8%84%9A%E6%9C%AC%EF%BC%88%E5%B7%B2%E5%BC%80%E6%BA%90%EF%BC%89/</id>
    <published>2023-03-21T01:28:01.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我个人经常在CSDN上进行写作，前一段时间我选择自己建站，为了省事，我直接使用了CSDN上的图片地址，当你在CSDN上写作时你上传的图片会存储在CSDN的服务器中，可以直接在网页上输入URL访问。但是上周CSDN开始对图片施加防盗链接了，我个人网站上的所有图片全都看不到了，并附上一句话：源站可能有防盗链机制,建议将图片保存下来直接上传。</p><p><img src="https://user-images.githubusercontent.com/67999981/226625933-810ee45f-d662-4b7c-a5c5-55519dae2a83.png" alt="image"></p><p>我最近也把博客地址放到简历里了，一想到hr打开我的网站看到一堆报错，肯定会大打折扣，直接pass在简历关TAT。搜索了一些解决方案，大多都治标不治本。目前图片还能存在哪里呢，大部分网站都有防盗链接，虽然github还没有，但是未来某一天也可能会设置防盗链接，毕竟谁愿意给你一直给你白嫖计算资源啊。于是乎我决定把图片存自己云服务器上。然而  一张一张下载 ——&gt; 上传到服务器 —–&gt; 挨个修改md里的图片地址，这样的流程如果手动去做恐怕要搞好几天吧。于是我立马爆肝三个晚上写一个批量转移的脚本并开源，一劳永逸！没有现成的轮子咱自己造轮子！<br><br>项目github地址：<a href="https://github.com/Stephen-SMJ/BlogImageTransfer">https://github.com/Stephen-SMJ/BlogImageTransfer</a><br>这个脚本适合与和我情况类似的朋友们使用: <br><br>1.个站图片被防盗链接限制 2.有云服务器</p><h2 id="脚本使用方法"><a href="#脚本使用方法" class="headerlink" title="脚本使用方法"></a>脚本使用方法</h2><ol><li>克隆仓库并进入项目目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Stephen-SMJ/BlogImageTransfer.git</span><br><span class="line">cd blog_img_script</span><br></pre></td></tr></table></figure></li><li>执行图片下载脚本（folder_path为你本地的md文件存储路径，如果本地没存要先去网站上下载到本地） <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python collection.py --folder_path &quot;the output path of your download images&quot; --output_path ./imgs/</span><br></pre></td></tr></table></figure><img src="https://user-images.githubusercontent.com/67999981/226603242-56024361-6c90-4b1d-81c3-eb4acb433f57.png" alt="屏幕截图 2023-03-21 163156"></li><li>此时你博客文件夹中的所有图片都被下载到了–output_path 这个目录，你需要把这个文件夹上传至你的服务器，并配置Nginx映射</li><li>修改所有md文件中的图片路径(只更域名，会自动保留原图片名称以及描述)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python change_address.py --folder_path &quot;the address of your md file in your blog project &quot; --server_address &quot;nginx中配置好的图片url&quot;</span><br></pre></td></tr></table></figure> <img src="https://user-images.githubusercontent.com/67999981/226602754-4a2a94c4-e018-4029-84ea-1e9b013df77a.png" alt="屏幕截图 2023-03-21 191719"></li></ol><p>完成，此时再访问你自己的博客网站应该就可以正常显示图片了！<br><br>项目github地址：<a href="https://github.com/Stephen-SMJ/BlogImageTransfer">https://github.com/Stephen-SMJ/BlogImageTransfer</a><br><strong>如果觉得好用麻烦高抬贵手点点star！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我个人经常在CSDN上进行写作，前一段时间我选择自己建站，为了省事，我直接使用了CSDN上的图片地址，当你在CSDN上写作时你上传的图片会存储在CSDN的服务器中，可以直接在网页上输入URL访问。但是上周CSDN开始对图片施加防盗链接了，我个人网站上的所有图片全都看不到了，</summary>
      
    
    
    
    
    <category term="Python" scheme="https://stephen-smj.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理中的坑</title>
    <link href="https://stephen-smj.tech/2023/03/03/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%9D%91/"/>
    <id>https://stephen-smj.tech/2023/03/03/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%AD%E7%9A%84%E6%B7%B1%E5%9D%91/</id>
    <published>2023-03-03T10:02:21.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天完成了一个人脸识别系统的开发，在开发环境中调试好之后打算部署到服务器上。由于系统需要调用用户摄像头需要使用https协议访问。而我自己的域名没有在公安局备份，没办法申请SSL证书。于是我借了朋友的一个域名，用Nginx反向代理一下。但是我在生产环境中部署好后端项目之后发现系统无法通过登录验证，同样的代码在开发环境中完全没有问题，经过排查之后发现是用户Token丢失。于是乎想到了肯定是Nginx的锅，搜索了一些资料和文档后，才知道Nginx进行代理时，有一个默认的参数：<strong>underscores_in_headers</strong>，<br>这个参数默认为false。这个参数的作用是是否转发<strong>带下划线的header</strong>，而很多人并不知道header的命名规范是最好不要带下划线的。因此如果不把参数设置为True的话，在转发之后header会被去掉。</p><p>重新配置Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  underscores_in_headers on;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天完成了一个人脸识别系统的开发，在开发环境中调试好之后打算部署到服务器上。由于系统需要调用用户摄像头需要使用https协议访问。而我自己的域名没有在公安局备份，没办法申请SSL证书。于是我借了朋友的一个域名，用Nginx反向代理一下。但是我在生产环境中部署好后端项目之后发</summary>
      
    
    
    
    
    <category term="Back-end" scheme="https://stephen-smj.tech/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>Git企业级分支提交流程</title>
    <link href="https://stephen-smj.tech/2023/03/01/Git%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
    <id>https://stephen-smj.tech/2023/03/01/Git%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</id>
    <published>2023-03-01T10:02:21.000Z</published>
    <updated>2024-07-07T08:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gist.github.com/assets/67999981/2d402a54-45a9-44c5-85fb-a026581ccad9" alt="d42dcb7d494a45cdb08754bce73127e3"></p><ol><li><p>首先在本地分支hfdev上进行开发，开发后要经过测试。</p></li><li><p>如果测试通过了，那么久可以合并到本地分支develop，合并之后hfdev和development应该完全一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add 文件</span><br><span class="line">git commit -m ‘注释’</span><br><span class="line">git checkout develop //切换到develop分支</span><br><span class="line">git merge --no-ff -m &#x27;合并&#x27; lhfdev </span><br><span class="line">git diff develop lhfdev</span><br></pre></td></tr></table></figure></li><li><p>接下来将本地分支develop提交到远程分支develop，注意提交之前要先pull一下，因为团队中还有其他人在提交代码，不pull会产生版本冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></li><li><p>接下来将develop分支的代码合并到main分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge --no-ff -m &#x27;合并到main&#x27; develop</span><br><span class="line">git diff develop main //查看是否有不同</span><br></pre></td></tr></table></figure></li><li><p>将本地mian分支提交到远程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li></ol><p>以上就完成了一次基本的提交操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gist.github.com/assets/67999981/2d402a54-45a9-44c5-85fb-a026581ccad9&quot; alt=&quot;d42dcb7d494a45cdb08754bce73127e3&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
</summary>
      
    
    
    
    
    <category term="Git" scheme="https://stephen-smj.tech/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer：在排序数组中查找数字I的个数</title>
    <link href="https://stephen-smj.tech/2023/03/01/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97I%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://stephen-smj.tech/2023/03/01/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97I%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2023-03-01T10:02:21.000Z</published>
    <updated>2024-07-07T08:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 2698题，剑指offer 53题。<br>击败100%的用户<br><img src="https://gist.github.com/assets/67999981/c43c0214-92f9-4fbb-b383-01b283fa021b" alt="a8ed2264ccb8471dbd3959bd9d3b3703"></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>统计一个数字在排序数组中出现的次数。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p>看到这个题目的第一反应是，如果面试遇到这个题我肯定会笑出来，直接循环计数就好了。但是仔细一想，这样的题如果只能给出一个O(N)的解法，恐怕会被当场终止面试。利用题目中从小到大排序的特性，首先想到了二分查找，时间复杂度能优化到O(log2n)，但是普通的二分查找返回的target的位置是不确定的（当有多个重复target时），因此我们需要对二分查找做修改：</p><p><em><strong>算法思路</strong></em>：</p><p>1.找到数组中最左边的target的位置idl ： 将普通的二分查找改为修改找到最左边（数组中第一个）target的位置</p><p>2.找到数组中最右边的target的位置idr ： 将普通的二分查找改为修改找到最右边（数组中最后一个）target的位置</p><p>3.idr-idl+1即为数组中target的个数</p><p><em><strong>修改细节</strong></em>：</p><p>普通二分查找当target等于nums[mid]时返回mid，但由于我们找到第一个之后还要找第二个。</p><p>因此如果是往左边找的话：</p><ul><li><em>在target = nums[mid]的情况下要 right = mid - 1;</em> </li><li><em>此时循环结束后的left就是第一个target的下标。//因为当mid小于target时一直在移动left，等于target时才开始移动right。</em></li></ul><p>​<br>那么如果是往右找的话：</p><ul><li><em>在target = nums[mid]的情况下要 left = mid + 1;</em></li><li><em>此时循环结束后的right就是最后一个target的下标。</em></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int lefId = leftBinarySearch(nums,target);</span><br><span class="line">        int rightId = rightBinarySearch(nums, target);</span><br><span class="line">        if (lefId == -1)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return rightId - lefId + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int leftBinarySearch(int[] nums, int target)&#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length-1;</span><br><span class="line">        int mid = (left +  right) / 2;</span><br><span class="line">        while (left &lt;= right)&#123;</span><br><span class="line">            if (target &lt;= nums[mid])&#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left + right) / 2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (left &lt; nums.length &amp;&amp; nums[left] == target)&#123;</span><br><span class="line">            return left;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int rightBinarySearch(int[] nums, int target)&#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length-1;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        while (left &lt;= right)&#123;</span><br><span class="line">            if (target &gt;= nums[mid])&#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (target &lt; nums[mid])&#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left + right) / 2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (right &gt;= 0 &amp;&amp; nums[right]==target)&#123;</span><br><span class="line">            return right;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;LeetCode 2698题，剑指offer 53题。&lt;br&gt;击败100%的用户&lt;br&gt;&lt;img src=&quot;https://gist.github.com/assets/67999981/c43c0214-92f9-4fbb-b383-01b283fa021b&quot; alt=&quot;</summary>
      
    
    
    
    
    <category term="Algorithms" scheme="https://stephen-smj.tech/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>手推神经网络前向与反向传播</title>
    <link href="https://stephen-smj.tech/2023/02/28/Forward%20Propagation%20and%20Back%20Propagation/"/>
    <id>https://stephen-smj.tech/2023/02/28/Forward%20Propagation%20and%20Back%20Propagation/</id>
    <published>2023-02-28T10:02:21.000Z</published>
    <updated>2024-07-07T08:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forward-Propagation-and-Back-Propagation"><a href="#Forward-Propagation-and-Back-Propagation" class="headerlink" title="Forward Propagation and Back Propagation"></a>Forward Propagation and Back Propagation</h1><p><img src="https://gist.github.com/assets/67999981/c9633ffa-c700-49c3-a1dd-e96aabd1a802" alt="神经网络"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Forward-Propagation-and-Back-Propagation&quot;&gt;&lt;a href=&quot;#Forward-Propagation-and-Back-Propagation&quot; class=&quot;headerlink&quot; title=&quot;Forward Prop</summary>
      
    
    
    
    
    <category term="Deep learning" scheme="https://stephen-smj.tech/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Npm run serve &amp; build 错误-Error-error:0308010C:digital envelope routines unsupported</title>
    <link href="https://stephen-smj.tech/2023/02/20/Npm%20run%20servebuild%20%E9%94%99%E8%AF%AF%EF%BC%9AError%20error0308010Cdigital%20envelope%20routinesunsupported/"/>
    <id>https://stephen-smj.tech/2023/02/20/Npm%20run%20servebuild%20%E9%94%99%E8%AF%AF%EF%BC%9AError%20error0308010Cdigital%20envelope%20routinesunsupported/</id>
    <published>2023-02-20T10:02:21.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>出现这个错误的原因</p><p>Baidu 了一下发现是 Node JS 17 的 BUG，相关 ISSUE 也给出了解决办法，就是修改package.json，在相关构建命令之前加入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set NODE_OPTIONS=–openssl-legacy-provider</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;serve&quot;: &quot;set NODE_OPTIONS=--openssl-legacy-provider &amp; vue-cli-service serve&quot;,</span><br><span class="line">&quot;build&quot;: &quot;set NODE_OPTIONS=--openssl-legacy-provider &amp; vue-cli-service build&quot;,</span><br><span class="line">&quot;build:report&quot;: &quot;set NODE_OPTIONS=--openssl-legacy-provider &amp; vue-cli-service build --report&quot;</span><br></pre></td></tr></table></figure><p>然后再次运行 npm run serve，npm run build就不会报错啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;出现这个错误的原因&lt;/p&gt;
&lt;p&gt;Baidu 了一下发现是 Node JS 17 的 BUG，相关 ISSUE 也给出了解决办法，就是修改package.json，在相关构建命令之前加入:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Front-end" scheme="https://stephen-smj.tech/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>使用Git将项目上传到Github仓库流程</title>
    <link href="https://stephen-smj.tech/2023/02/15/%E4%BD%BF%E7%94%A8Git%E5%B0%86%E6%96%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github/"/>
    <id>https://stephen-smj.tech/2023/02/15/%E4%BD%BF%E7%94%A8Git%E5%B0%86%E6%96%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github/</id>
    <published>2023-02-15T10:02:21.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>首先在你本地的项目文件夹初始化git，最好指定名称为main，因为新版本的git远程仓库默认分支为main，大家估计都还习惯用matser，所以在提交的时候很容易创建出来两个分支，因此在这里初始化的时候就直接指定分支名称为main，以后就不用改了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init -b main //初始化，生成.git文件夹，本地分支名称为main</span><br></pre></td></tr></table></figure><ol start="2"><li>新建一个远程仓库，名称为origin，并与本地分支联系起来（一定要分清仓库和分支的概念）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com //git添加远程仓库</span><br></pre></td></tr></table></figure><ol start="3"><li>将本地项目文件添加到本地仓库 （.代表所有文件，单独文件的话可以用文件名）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ol start="4"><li>将本地仓库中的文件提交到远程仓库去，并附带一条message，告诉其他人你为什么要上传这个文件，修改了哪些东西</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;upload&#x27;</span><br></pre></td></tr></table></figure><ol start="5"><li>将远程仓库中的文件推送到main分支去，这样就能在github仓库中看到全部的文件了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main:main</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;首先在你本地的项目文件夹初始化git，最好指定名称为main，因为新版本的git远程仓库默认分支为main，大家估计都还习惯用matser，所以在提交的时候很容易创建出来两个分支，因此在这里初始化的时候就直接指定分支名称为main，以后就不用改了。&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Git" scheme="https://stephen-smj.tech/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>如何将你的前端项目上传到Github仓库并且部署到github pages</title>
    <link href="https://stephen-smj.tech/2023/02/10/%E5%A6%82%E4%BD%95%E5%B0%86%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%BB%93%E5%BA%93%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2/"/>
    <id>https://stephen-smj.tech/2023/02/10/%E5%A6%82%E4%BD%95%E5%B0%86%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%E4%BB%93%E5%BA%93%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2/</id>
    <published>2023-02-10T10:02:21.000Z</published>
    <updated>2024-07-07T08:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>仓库名称为你的项目名，可以生成一个readme文件，不生成也行。<br><img src="https://gist.github.com/assets/67999981/3006f1c6-c08a-43b7-a09b-0b57c179212b" alt="e44216169e9f4cac92175521cb591c95"></p><h2 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h2><p>首先打开你的.gitignore文件看看有没有/dist，如果有的话要删掉这一行，因为这个文件的作用就是告诉git哪些文件不上传，而我们要上传的就是dist，所以必须删除掉<br><img src="https://gist.github.com/assets/67999981/3c317b2b-810b-40fd-8323-2996508b84e3" alt="368f86a262b84071aee3de72d7bb177b"></p><p>在本地根目录下运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后你就会发现文件夹中生成了一个dist文件夹，里面是打包好的原生的html, css, js文件，此时你打开index.html应该能直接在网页中看到样式，如果看不到那就说明打包有错误，F12查看报错并解决。</p><p><img src="https://gist.github.com/assets/67999981/751e1f09-36e9-43eb-a561-3b8f254d63aa" alt="136ad5c2c6814a90ade1245356ea95af"></p><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><p>将你本地的项目上传到github仓库中，具体步骤可以看我之前写的这篇博客：<a href="https://blog.csdn.net/qq_44785351/article/details/129320983?spm=1001.2014.3001.5501">使用Git上传项目到Github仓库中</a></p><h2 id="打包并发布"><a href="#打包并发布" class="headerlink" title="打包并发布"></a>打包并发布</h2><p>接下来点击settings -&gt; pages， 在source中选择deploy from a branch, branch 选择你要部署的branch，目录选择root，点击save。</p><p><img src="https://gist.github.com/assets/67999981/731fec3e-4ac5-4ab9-af8e-8293bcddd6b2" alt="a2e5dc5484d943c18ecd7955e13b4d65"></p><p>可以在actions中查看构建是否完毕，没报错的话直接访问地址: 仓库地址+/dist/ 就能看到了，毕竟打包的项目 <code>index.html</code> 在这个目录下</p><p><img src="https://gist.github.com/assets/67999981/f10af9de-e8a3-4832-b971-ab6ebce88676" alt="1f077aa08433496b97bfad732fd3cc3f"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;headerlink&quot; title=&quot;新建仓库&quot;&gt;&lt;/a&gt;新建仓库&lt;/h2&gt;&lt;p&gt;仓库名称为你的项目名，可以生成一个readme文件，不生成也行。&lt;br&gt;&lt;img src=&quot;https://gist.git</summary>
      
    
    
    
    
    <category term="Git" scheme="https://stephen-smj.tech/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>一道很考验数据结构与算法的功底的笔试题：用JAVA设计一个缓存结构</title>
    <link href="https://stephen-smj.tech/2023/02/10/%E7%94%A8JAVA%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>https://stephen-smj.tech/2023/02/10/%E7%94%A8JAVA%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84/</id>
    <published>2023-02-10T08:40:34.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在上周的笔试中遇到了这样一道题目，觉得有难度而且很考验数据结构与算法的功底，因此Mark一下。</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>设计并实现一个缓存数据结构:<br><br>该数据结构具有以下功能：<br><br>get(key)<br> 如果指定的key存在于缓存中，则返回与该键关联的值，则返回-1。<br><br>put(key、val、weight)<br><br>将值与缓存中的键关联，以便以后可以通过get(key)检索值。<br><br>缓存具有固定的容量，当达到该容量时，score最小的密钥必须失效，直到密钥的数量落在缓存容量之内。<br>score的计算方法如下：<br><br>weight ∕ [ln(current_time - last_accessed_time + 1) + 1]<br><br>缓存的实现需要get(key)的时间复杂度为O(1)。为了实现高速缓存，您可以假设可用一些常见的数据结构，如数组、不同类型的列表和哈希表。在答案的最后，给出并解释get(key)和放入put(key)的计算复杂度</p><h3 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h3><p>首先，一说到get和put，肯定会想到哈希map，并且哈希的get时间复杂度也为O(1),符合要求，但比较棘手的需求是如何实现缓存的score机制，当缓存满的时候需要让score最低的节点drop掉。苦思冥想之后我想到了优先队列(priority queue)，平时觉得这个数据结构很冷门，但确实有应用场景，优先队列是一种根据权重进行出队顺序排列的队列，那么我只需要将题目中的score定位为权重就行了。<br>此时我又想到了用JAVA中的Comparator去定义一个这样的权重策略，因为优先队列的权重是可以被Comparator重写的。所以我总共需要用到两个数据结构。<br>用hashmap实现get和put的一一对应，同时将节点存入优先队列，当容量满时让score小的出队就行了。（注意，Java中优先队列是权重小的先出队）</p><h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class Node&#123;</span><br><span class="line">int key;</span><br><span class="line">int val;</span><br><span class="line">int weight;</span><br><span class="line">int timeStamp;</span><br><span class="line"></span><br><span class="line">public Node(int key, int val, int weight, int timeStamp) &#123;</span><br><span class="line">this.key = key;</span><br><span class="line">this.val = val;</span><br><span class="line">this.weight = weight;</span><br><span class="line">this.timeStamp = timeStamp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cache &#123;</span><br><span class="line">int capacity;</span><br><span class="line">int timeStamp;</span><br><span class="line">Map&lt;Integer,Node&gt; nodeMap;  //k-v mapping</span><br><span class="line">PriorityQueue&lt;Node&gt; prque;  //store the node</span><br><span class="line"></span><br><span class="line">public Cache(int capacity)&#123;</span><br><span class="line">this.capacity = capacity;</span><br><span class="line">this.timeStamp = 0;</span><br><span class="line">nodeMap = new HashMap&lt;&gt;();</span><br><span class="line">Comparator&lt;Node&gt; timeWeightComparator = new Comparator&lt;Node&gt;() &#123; //rewrite the priority</span><br><span class="line">@Override</span><br><span class="line">public int compare(Node o1, Node o2) &#123;</span><br><span class="line">return (int) (o1.weight / (Math.log(o1.timeStamp - o2.timeStamp + 1) + 1) -</span><br><span class="line">(o2.weight / (Math.log(o2.timeStamp - o1.timeStamp + 1) + 1)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">prque = new PriorityQueue&lt;&gt;(timeWeightComparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int get(int key)&#123;  //时间复杂度O(1), hashmap.get为O(1)</span><br><span class="line">if (!nodeMap.containsKey(key))&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">Node getNode = nodeMap.get(key);</span><br><span class="line">getNode.timeStamp = ++timeStamp;</span><br><span class="line">return getNode.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(int key, int val, int weight)&#123; //最好的情况是已经包含这个键了,时间复杂度为O(1)</span><br><span class="line">if (this.capacity &lt;= 0)&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (nodeMap.containsKey(key))&#123;</span><br><span class="line">Node newNode = nodeMap.get(key);</span><br><span class="line">newNode.val = val;</span><br><span class="line">newNode.weight = weight;</span><br><span class="line">newNode.timeStamp = ++ timeStamp;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if (nodeMap.size() == capacity)&#123;</span><br><span class="line">Node leastNode = prque.poll(); //O(logN)</span><br><span class="line">assert leastNode != null;</span><br><span class="line">nodeMap.remove(leastNode.key);</span><br><span class="line">&#125;</span><br><span class="line">Node newNode = new Node(key, val, weight, ++timeStamp);</span><br><span class="line">prque.add(newNode);</span><br><span class="line">nodeMap.put(key,newNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123; //test case</span><br><span class="line">Cache cache = new Cache(5);</span><br><span class="line">cache.put(0,15,3);</span><br><span class="line">cache.put(1,28,10);</span><br><span class="line">cache.put(2,16,4);</span><br><span class="line">cache.put(3,4,6);</span><br><span class="line">cache.put(4,75,5);</span><br><span class="line">cache.put(4,100,100);</span><br><span class="line">System.out.println(cache.get(1));</span><br><span class="line">System.out.println(cache.get(2));</span><br><span class="line">System.out.println(cache.get(3));</span><br><span class="line">System.out.println(cache.get(4));</span><br><span class="line">System.out.println(cache.get(0));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BigO-notation-analysis"><a href="#BigO-notation-analysis" class="headerlink" title="BigO notation analysis"></a>BigO notation analysis</h1><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p>The get operation is base on the hashmap.get(key). So, the time complexity is O(1).</p><h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><h3 id="The-put-operation-can-be-seperated-to-follow-two-case"><a href="#The-put-operation-can-be-seperated-to-follow-two-case" class="headerlink" title="The put operation can be seperated to follow two case:"></a>The put operation can be seperated to follow two case:</h3><h4 id="1-Don’t-need-insert-a-new-node-when-the-key-is-exist"><a href="#1-Don’t-need-insert-a-new-node-when-the-key-is-exist" class="headerlink" title="1. Don’t need insert a new node (when the key is exist)"></a>1. Don’t need insert a new node (when the key is exist)</h4><p>In this case, we only need to get the node from hashmap and update it. The time complexity is O(1).</p><h4 id="2-Insert-new-Node"><a href="#2-Insert-new-Node" class="headerlink" title="2. Insert new Node"></a>2. Insert new Node</h4><p>If the capcity is not reached. we can insert a new node directly. the complexity is O(logN) + O(1) = O(logN) —- (O(logN) for priorityque, O(1) for hashmap).</p><p>If the capicity is reached. we need to poll a node with least score, the time complexity is O(logN). Then inster a new node. The time complexity is O(logN) + O(logN) + O(1) = O(logN).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在上周的笔试中遇到了这样一道题目，觉得有难度而且很考验数据结构与算法的功底，因此Mark一下。&lt;/p&gt;
&lt;h2 id=&quot;需求说明&quot;&gt;&lt;a href=&quot;#需求说明&quot; class=&quot;headerlink&quot; title=&quot;需求说明&quot;&gt;&lt;/a&gt;需求说明&lt;/h2&gt;&lt;p&gt;设计并实现一</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://stephen-smj.tech/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>解决npm run build 之后生成的index.html页面打开为空</title>
    <link href="https://stephen-smj.tech/2023/02/05/%E8%A7%A3%E5%86%B3npm%20run%20build%20%E4%B9%8B%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84index.html%E9%A1%B5%E9%9D%A2%E6%89%93%E5%BC%80%E4%B8%BA%E7%A9%BA/"/>
    <id>https://stephen-smj.tech/2023/02/05/%E8%A7%A3%E5%86%B3npm%20run%20build%20%E4%B9%8B%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84index.html%E9%A1%B5%E9%9D%A2%E6%89%93%E5%BC%80%E4%B8%BA%E7%A9%BA/</id>
    <published>2023-02-05T10:02:21.000Z</published>
    <updated>2024-07-07T08:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在用npm构建前端项目之后发现生成dist文件夹中的页面是空的，于是F12看了一下发现有报错：</p><p><img src="https://gist.github.com/assets/67999981/06d5fd9b-f79e-428b-828a-e56c69e3b5be" alt="cb34d61f0f2f4bd88a3f14087a5d262a"></p><p>这个报错很显然是找不到文件，因此我猜可能是构建项目过程中路径出错了。打开index.html的源码来看，发现路径用的是’/‘，但index.html文件和js文件夹是同级目录，如果从index.html进入到js文件夹内的文件，需要用’./‘。<br>也就是说，对比dist文件夹结构可以看到资源路径的引入是错误的，**应该用’./‘而不是’/‘**。</p><p>结合了百度，发现一个有效的解决方案：</p><p>在项目根目录下创建一个vue.config.js文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: &#x27;./&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再次npm run build进行打包。打包完成后，再打开dist文件夹内的index.html文件，就可以正常显示项目了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在用npm构建前端项目之后发现生成dist文件夹中的页面是空的，于是F12看了一下发现有报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gist.github.com/assets/67999981/06d5fd9b-f79e-428b-828a-e56c69</summary>
      
    
    
    
    
    <category term="Front-end" scheme="https://stephen-smj.tech/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>Java循环和Python循环的区别</title>
    <link href="https://stephen-smj.tech/2023/02/01/JAVA%E5%BE%AA%E7%8E%AF%E5%92%8CPython%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://stephen-smj.tech/2023/02/01/JAVA%E5%BE%AA%E7%8E%AF%E5%92%8CPython%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-02-01T10:27:52.000Z</published>
    <updated>2024-07-07T06:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一句话总结</strong>：JAVA循环中的变量i是动态分配的，可以被改变的。而Python循环中的i是在初始化时就被分配在了内存中，无法改变。实验：</p><p>JAVA for循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int count  = 0;</span><br><span class="line">for (int i=0; i&lt;6; i++)&#123;</span><br><span class="line">i++;</span><br><span class="line">System.out.println(i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>1<br>3<br>5<br>count : 3<br>也就是只循环了3次，因为我们在循环中改变了i的值。</p><p>Python for循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">for i in range(6):</span><br><span class="line">    i += 1</span><br><span class="line">    print(i)</span><br><span class="line">    count += 1</span><br><span class="line">print(&quot;count:&quot; + str(count))</span><br></pre></td></tr></table></figure><p>输出结果：<br>1<br>2<br>3<br>4<br>5<br>6<br>count:6<br>可见，在循环内部修改的i在下次循环时还会变回默认的值，因为range(6)相当于直接分配了一个[0~5]的数组，i会在这个数组中遍历取值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一句话总结&lt;/strong&gt;：JAVA循环中的变量i是动态分配的，可以被改变的。而Python循环中的i是在初始化时就被分配在了内存中，无法改变。实验：&lt;/p&gt;
&lt;p&gt;JAVA for循环：&lt;/p&gt;
&lt;figure class=&quot;highlight plai</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://stephen-smj.tech/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>网站部署：使用Nginx部署vue项目到阿里云服务器</title>
    <link href="https://stephen-smj.tech/2022/11/10/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%EF%BC%9A%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://stephen-smj.tech/2022/11/10/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%EF%BC%9A%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-11-10T05:32:39.000Z</published>
    <updated>2024-07-07T08:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近租了个阿里云的服务器，想使用Nginx把刚做好的网站部署上去</p><h2 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h2><p>目前yum已经有了Nginx的源，因此可以直接用yum下载和安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure><p>默认的安装位置为/etc/nginx<br>默认的项目位置为/usr/share/nginx<br>如果安装失败检查是否安装了zlib prce openssl 以及 gcc<br>查看是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep openssl</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install gcc zlib zlib<span class="literal">-devel</span> pcre<span class="literal">-devel</span> openssl openssl<span class="literal">-devel</span></span><br></pre></td></tr></table></figure><h2 id="将Vue项目打包好上传到服务器"><a href="#将Vue项目打包好上传到服务器" class="headerlink" title="将Vue项目打包好上传到服务器"></a>将Vue项目打包好上传到服务器</h2><p>先在本地打包好生成dist文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>将dist文件夹上传到：/usr/share/nginx/html/</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>打开/etc/nginx/nginx.conf文件，按照如下备注的地方修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   <span class="number">65</span>;</span><br><span class="line">    types_hash_max_size <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123; <span class="comment">#主要修改server</span></span><br><span class="line">        listen       <span class="number">9000</span>;  <span class="comment">#你想设置的端口号</span></span><br><span class="line">        server_name  <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>; <span class="comment">#你的服务器的public地址</span></span><br><span class="line">        root         /usr/share/nginx/html; <span class="comment">#所有项目的根目录，不写也没事</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123; <span class="comment">#项目地址</span></span><br><span class="line">            root   /usr/share/nginx/html/dist/; <span class="comment">#项目的根目录</span></span><br><span class="line">            index  index.html index.htm; <span class="comment">#默认访问index时的页面</span></span><br><span class="line">            try_files $uri /index.html; <span class="comment">#</span></span><br><span class="line">        &#125;</span><br><span class="line">        location /api/ &#123;<span class="comment"># 设置跨域反向代理</span></span><br><span class="line">            rewrite ^.+apis/?(.*)$ /$<span class="number">1</span> <span class="keyword">break</span>;  <span class="comment"># 重写请求</span></span><br><span class="line">            proxy_pass http://<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">5000</span>;  <span class="comment"># 后端服务器地址</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">#如果需要配置代理，可以加以下代码</span></span><br><span class="line">         location /business &#123;</span><br><span class="line">             proxy_pass  http://business.app.com;</span><br><span class="line">        &#125;</span><br><span class="line">         location /user &#123;</span><br><span class="line">              proxy_pass  http://user.app.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page <span class="number">404</span> /<span class="number">404.</span>html;</span><br><span class="line">        location = /<span class="number">404.</span>html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就配置好了Nginx。<br>接下来启动Nginx，如果之前已经启动了那就重启：这里给一些Nginx的常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">start nginx        <span class="comment">#启动 Nginx</span></span><br><span class="line">nginx -s reopen <span class="comment">#重启Nginx</span></span><br><span class="line">nginx -s reload <span class="comment">#重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span></span><br><span class="line">nginx -s stop <span class="comment">#强制停止Nginx服务</span></span><br><span class="line">nginx -s quit <span class="comment">#优雅地停止Nginx服务（即处理完所有请求后再停止服务）</span></span><br><span class="line">nginx -V <span class="comment">#显示版本和配置选项信息，然后退出</span></span><br><span class="line">tasklist /fi <span class="string">&quot;imagename eq nginx.exe&quot;</span>     <span class="comment"># 查看windows任务管理器下Nginx的进程命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者：</span></span><br><span class="line">./nginx <span class="comment">#启动</span></span><br><span class="line">./nginx -s stop <span class="comment">#关闭</span></span><br><span class="line">./nginx -s reload <span class="comment">#重启</span></span><br><span class="line">systemctl restart nginx <span class="comment">#重启</span></span><br><span class="line"><span class="comment">#启动Nginx并设置开机自动运行</span></span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure><h2 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br></pre></td></tr></table></figure><p>开启之后需要重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看是否已开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h2 id="阿里云加入安全组"><a href="#阿里云加入安全组" class="headerlink" title="阿里云加入安全组"></a>阿里云加入安全组</h2><p>只有加入安全组之后外网才能访问这个安全组内的所有端口<br>实例-&gt;安全组-&gt;配置规则-&gt;手动添加（tcp， 端口号（a到b范围），源0.0.0.0）<br><img src="https://gist.github.com/assets/67999981/5284bc59-b28e-4a48-95e3-f60f07168c4e" alt="e96c36dd7cff49d98683d719dec01c57"><br>加入好安全组之后不需要任何重启就能使用你的项目地址访问到了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近租了个阿里云的服务器，想使用Nginx把刚做好的网站部署上去&lt;/p&gt;
&lt;h2 id=&quot;下载Nginx&quot;&gt;&lt;a href=&quot;#下载Nginx&quot; class=&quot;headerlink&quot; title=&quot;下载Nginx&quot;&gt;&lt;/a&gt;下载Nginx&lt;/h2&gt;&lt;p&gt;目前yum已经有了N</summary>
      
    
    
    
    
    <category term="Back-end" scheme="https://stephen-smj.tech/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>Flask获取请求的几种方式</title>
    <link href="https://stephen-smj.tech/2022/11/01/Flask%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://stephen-smj.tech/2022/11/01/Flask%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-11-01T10:02:21.000Z</published>
    <updated>2024-07-05T08:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通json数据请求："><a href="#普通json数据请求：" class="headerlink" title="普通json数据请求："></a>普通json数据请求：</h2><p>请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req_url = <span class="string">&#x27;http://127.0.0.1:6008/language_predict&#x27;</span></span><br><span class="line">req_data = &#123;<span class="string">&quot;text&quot;</span>:<span class="built_in">input</span>&#125;</span><br><span class="line">re = requests.post(url=req_url,data=req_data).json()</span><br></pre></td></tr></table></figure><p>1.form接收方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.request.form[<span class="string">&quot;text&quot;</span>]</span><br></pre></td></tr></table></figure><p>2.get_data()接受方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = flask.request.get_data()</span><br><span class="line">data = json.loads(a)</span><br></pre></td></tr></table></figure><p>3.request.args.to_dict()接受方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_data = request.args.to_dict()</span><br><span class="line">data = get_data.get(<span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="文件接受方式："><a href="#文件接受方式：" class="headerlink" title="文件接受方式："></a>文件接受方式：</h2><p>请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&#x27;image&#x27;</span>: image&#125;</span><br><span class="line">req_url = <span class="string">&#x27;http://127.0.0.1:6008/language_predict&#x27;</span></span><br><span class="line">re = requests.post(url=req_url,fiels=payload).json()</span><br></pre></td></tr></table></figure><p>接受方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.request.files.get(<span class="string">&quot;image&quot;</span>)</span><br></pre></td></tr></table></figure><p>另加一个判断请求类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flask.request.method == <span class="string">&quot;POST&quot;</span>:</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;普通json数据请求：&quot;&gt;&lt;a href=&quot;#普通json数据请求：&quot; class=&quot;headerlink&quot; title=&quot;普通json数据请求：&quot;&gt;&lt;/a&gt;普通json数据请求：&lt;/h2&gt;&lt;p&gt;请求：&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    
    <category term="Back-end" scheme="https://stephen-smj.tech/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch模型推理详细步骤以及如何排查模型和参数字典对不上的问题：Missing key(s) in state_dict_ xxxx</title>
    <link href="https://stephen-smj.tech/2022/11/01/%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%8F%82%E6%95%B0%E5%AD%97%E5%85%B8%E5%AF%B9%E4%B8%8D%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9AMissing%20key(s)%20in%20state_dict_%20xxxx/"/>
    <id>https://stephen-smj.tech/2022/11/01/%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%8F%82%E6%95%B0%E5%AD%97%E5%85%B8%E5%AF%B9%E4%B8%8D%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9AMissing%20key(s)%20in%20state_dict_%20xxxx/</id>
    <published>2022-11-01T06:07:19.000Z</published>
    <updated>2024-07-07T08:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模型推理详细步骤"><a href="#模型推理详细步骤" class="headerlink" title="模型推理详细步骤"></a>模型推理详细步骤</h1><h2 id="模型加载步骤"><a href="#模型加载步骤" class="headerlink" title="模型加载步骤"></a>模型加载步骤</h2><p>首先，模型加载总共分为三步，第一步加载网络结构，需要和你训时的network结构一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Model.FeedBack3(cfg, config_path=<span class="literal">None</span>, pretrained=<span class="literal">True</span>).to(device)</span><br></pre></td></tr></table></figure><p>第二步，加载训练好的参数，实际上虽然我们一直说训练模型，实际上训练出来的就是一组参数，这个参数是一个字典类型，一般保存的名称为xxx.pt或者pth。里面存放的是模型每一层中的权重等数据。pytorch中对于加载参数使torch.load()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pretrained_dict = torch.load(<span class="string">&#x27;outputmicrosoft-deberta-v3-base_fold3_best.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第三步，将参数加载进模型里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(pretrained_dict[<span class="string">&#x27;model_state_dict&#x27;</span>], strict=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>以上就是加载模型的所有步骤了</p><h2 id="关于模型参数和字典对不上的问题"><a href="#关于模型参数和字典对不上的问题" class="headerlink" title="关于模型参数和字典对不上的问题"></a>关于模型参数和字典对不上的问题</h2><p>一般报错为：Missing key(s) in state_dict: xxxx<br>最近在做模型部署的时候发现了这个问题，并且之前也遇到过，由于急于求成就简单实在模型加载参数的时候用了strict=False这样的条件，这个条件会使模型直接忽略所有对不上的参数，本质上没有解决问题。今天在debug时对模型每一层的参数排查终于发现了问题所在。<br>首先开启debug模式，直接将断点打在模型加载的代码上：<br>首先查看model的结构有没有问题：<br><img src="https://gist.github.com/assets/67999981/d1f53c9e-c14d-4bf7-9b6c-a20032581c59" alt="2360242ba3164248b335eaec231c5b65"><br>接下来进行下一步，执行到加载参数字典，同样查看你的参数字典（这里由于参数过多就不详细展示了）：<br><img src="https://gist.github.com/assets/67999981/475a879e-a86c-4378-9381-d2c2500c5c2d" alt="e9342ed82a414cbeb11cdc94afc02de1"><br>那么要如何排查呢，具体步骤如下：<br>首先参数字典里都是以键值对和tensor型式存储的，那么我们只需要一一排查键值对和参数。比如首先是model建，那么只有你加载参数的时候只有加载里面的model建模型才能读到参数，<strong>实际上我就是错在这里了</strong>，因为我加载的是通常使用的‘model_state_dict’这个建，因为我训练部分是网上复制来的代码，没想到他把参数保存为model。<br><img src="https://gist.github.com/assets/67999981/2f2d59ce-ca47-48ab-819c-be4ffbee2bfc" alt="fcc98b06d9da4677b16cfc0c8154c649"></p><p>也就是我只需要把前面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(pretrained_dict[<span class="string">&#x27;model_state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(pretrained_dict[<span class="string">&#x27;model&#x27;</span>])</span><br></pre></td></tr></table></figure><p>就行了。<br>那么如果你的问题不是这里，接下来改如何排查呢<br>接着看OrderedDict里，这里面是模型每一层的参数，对照方法如下：<br><img src="https://gist.github.com/assets/67999981/7deb7f9b-94ab-4750-a25c-c0ab48a19c2a" alt="b4180b258ca349978bce1ec05b4b529d"><br><strong>相当于网络结构中的每一层都会变为一个对应的tensor<br>(model)(embeddings)(LayerNorm)在参数中就会存为：(‘model.embdeddings.LayerNorm’, tensor([xxxxx])</strong><br>这样就看懂了吧，如此对照每一层网络结构，只要你有耐心，就能找出来具体是那一层不对，不过大多情况下这种在网络中间层出现参数不对的情况很少，出现的原因也肯定是你推理部分加载的网络结构和训练时的网络结构不一致导致的。<br>顺便推荐一个能帮你排查模型参数的代码，他会输出具体有多少参数使用了和没使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_keys</span>(<span class="params">model, pretrained_state_dict</span>):</span><br><span class="line">    ckpt_keys = <span class="built_in">set</span>(pretrained_state_dict.keys())</span><br><span class="line">    model_keys = <span class="built_in">set</span>(model.state_dict().keys())</span><br><span class="line">    used_pretrained_keys = model_keys &amp; ckpt_keys</span><br><span class="line">    unused_pretrained_keys = ckpt_keys - model_keys</span><br><span class="line">    missing_keys = model_keys - ckpt_keys</span><br><span class="line">    <span class="comment"># filter &#x27;num_batches_tracked&#x27;</span></span><br><span class="line">    missing_keys = [x <span class="keyword">for</span> x <span class="keyword">in</span> missing_keys</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> x.endswith(<span class="string">&#x27;num_batches_tracked&#x27;</span>)]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(missing_keys) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[Warning] missing keys: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(missing_keys))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;missing keys:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(missing_keys)))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(unused_pretrained_keys) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[Warning] unused_pretrained_keys: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            unused_pretrained_keys))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;unused checkpoint keys:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="built_in">len</span>(unused_pretrained_keys)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;used keys:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(used_pretrained_keys)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(used_pretrained_keys) &gt; <span class="number">0</span>, \</span><br><span class="line">        <span class="string">&#x27;check_key load NONE from pretrained checkpoint&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="模型推理中的数据处理"><a href="#模型推理中的数据处理" class="headerlink" title="模型推理中的数据处理"></a>模型推理中的数据处理</h2><p>首先模型推理中数据最终的处理格式要和训练时输入进网络中的格式一致，不过我们通常不再构造新的dataset和使用dataloader，而是直接针对input处理成我们需要的格式。<br>主要步骤为，读取数据，embedding，增加维度<br>读取的数据可以是本地存的，如果你是要将模型部署在web上那么数据就是从客户端传来的json格式的数据，因此通常需要先将真正的input取出来。<br>接下来是向量化，这里步骤和训练中的一致，比如训练中使用了resize([800,800])和toTensor，那么推理中也要这样设置。<br>由于我是NLP任务，那么处理的步骤为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">inputs = cfg.tokenizer.encode_plus(</span><br><span class="line">            <span class="built_in">input</span>,</span><br><span class="line">            return_tensors=<span class="literal">None</span>,</span><br><span class="line">            add_special_tokens=<span class="literal">True</span>,</span><br><span class="line">            max_length=cfg.max_lenth,</span><br><span class="line">            pad_to_max_length=<span class="literal">True</span>,</span><br><span class="line">            truncation=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"> <span class="keyword">for</span> k, v <span class="keyword">in</span> inputs.items():</span><br><span class="line">    inputs[k] = torch.tensor(v, dtype=torch.long)</span><br></pre></td></tr></table></figure><p>至此，再次输出此时的tensor和训练时输入进模型的tensor相比，只是少了一个维度，这个维度通常可以理解我们在训练的时候是有batch_size的，而推理时没有，因此要手动升维，升维度的函数有很多，通常使用unsequeeze(1)或者expand：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> inputs.items():</span><br><span class="line">    s = v.shape</span><br><span class="line">    inputs[k] = v.expand(<span class="number">1</span>,-<span class="number">1</span>).to(device) <span class="comment">#-1自动计算</span></span><br></pre></td></tr></table></figure><p>这样处理完数据格式就和训练时完全一致了，说白了还是要先debug一下训练时的数据，看看到底输进去的是什么格式，然后在推理部分照着一点一点改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模型推理详细步骤&quot;&gt;&lt;a href=&quot;#模型推理详细步骤&quot; class=&quot;headerlink&quot; title=&quot;模型推理详细步骤&quot;&gt;&lt;/a&gt;模型推理详细步骤&lt;/h1&gt;&lt;h2 id=&quot;模型加载步骤&quot;&gt;&lt;a href=&quot;#模型加载步骤&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Deep learning" scheme="https://stephen-smj.tech/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你使用YOLOV5训练自己的目标检测数据集</title>
    <link href="https://stephen-smj.tech/2022/10/22/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8YOLOV5%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://stephen-smj.tech/2022/10/22/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8YOLOV5%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2022-10-22T11:13:50.000Z</published>
    <updated>2024-07-07T08:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLOV5介绍"><a href="#YOLOV5介绍" class="headerlink" title="YOLOV5介绍"></a>YOLOV5介绍</h1><p>YOLOV5是目前最火热的目标检测算法之一。YOLOV5为一阶段检测算法因此它的速度非常之快。可以在复杂场景中达到60祯的实时检测频率。<img src="https://gist.github.com/assets/67999981/f5bc1c7c-d7c3-4ee2-88e5-aa9bc06db4d5" alt="3538502afa944f1e81b8069e9ae5ec64"></p><p><strong>接下来本文将详细的讲述如何使用YOLOV5去训练自己的数据集</strong></p><h2 id="一、下载YOLOv5开源代码"><a href="#一、下载YOLOv5开源代码" class="headerlink" title="一、下载YOLOv5开源代码"></a>一、下载YOLOv5开源代码</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git clone https://github.com/ultralytics/yolov5.git</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> yolov5</span><br><span class="line"><span class="variable">$</span> pip install <span class="literal">-r</span> requirements.txt</span><br></pre></td></tr></table></figure><p>YOLOV5中使用了Tensorboard和Wandb来可视化训练，其中Wandb配置可以看这篇文章：<br><a href="https://blog.csdn.net/qq_44785351/article/details/127465183?spm=1001.2014.3001.5502">Wandb安装与配置</a></p><h2 id="二、构建YOLO数据集"><a href="#二、构建YOLO数据集" class="headerlink" title="二、构建YOLO数据集"></a>二、构建YOLO数据集</h2><p>数据集地址：<a href="https://www.kaggle.com/datasets/andrewmvd/face-mask-detection">MaskDetecion</a><br>下载好数据集之后将数据集解压到YOLOV5项目文件夹下的DataSets目录下（需要先新建一个DataSets文件夹）</p><h3 id="划分数据集"><a href="#划分数据集" class="headerlink" title="划分数据集"></a>划分数据集</h3><p>将数据集划分为训练集、验证集、测试集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment">#划分数据集</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#xml文件的地址，根据自己的数据进行修改 xml一般存放在Annotations下</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--xml_path&#x27;</span>, default=<span class="string">&#x27;./DataSets/annotations&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;xml path&#x27;</span>)</span><br><span class="line"><span class="comment">#数据集划分后txt文件的存储地址，地址选择自己数据下的ImageSets/Main</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--txt_path&#x27;</span>, default=<span class="string">&#x27;./DataSets/ImageSets/Main&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;output txt label path&#x27;</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line">trainval_percent = <span class="number">0.9</span> <span class="comment">#训练集和验证集的比例</span></span><br><span class="line">train_percent = <span class="number">0.9</span> <span class="comment">#训练集占总数据的比例</span></span><br><span class="line">imgfilepath = opt.img_path</span><br><span class="line">txtsavepath = opt.txt_path</span><br><span class="line">total_xml = os.listdir(imgfilepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(txtsavepath):</span><br><span class="line">    os.makedirs(txtsavepath)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line">list_index = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(list_index, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"><span class="comment">#划分生成的文件名称</span></span><br><span class="line">file_trainval = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/trainval.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_test = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_train = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_val = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/val.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_index:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        file_trainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            file_train.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_val.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_test.write(name)</span><br><span class="line"></span><br><span class="line">file_trainval.close()</span><br><span class="line">file_train.close()</span><br><span class="line">file_val.close()</span><br><span class="line">file_test.close()</span><br></pre></td></tr></table></figure><p>划分完成之后会生成以下文件：<br><img src="https://gist.github.com/assets/67999981/97f25b37-e6be-45b0-a35d-bef6d4f4f7bd" alt="ce14d91fd428416d9f1bcd119fd556d3"><br>每个txt中的内容为xml的文件名：<br><img src="https://gist.github.com/assets/67999981/3cf8ee6a-984d-4d2c-be8d-09f88a0b5689" alt="190431b4cd1d4963a59fce2af705cfb7"></p><h3 id="生成YOLO格式的label"><a href="#生成YOLO格式的label" class="headerlink" title="生成YOLO格式的label"></a>生成YOLO格式的label</h3><p>转换xml为txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment">#VOC生成txt的文件</span></span><br><span class="line"></span><br><span class="line">sets = [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>] <span class="comment">#数据集，最后会生成以这三个数据集命名的txt文件</span></span><br><span class="line"></span><br><span class="line">classes = [<span class="string">&#x27;with_mask&#x27;</span>, <span class="string">&#x27;without_mask&#x27;</span>, <span class="string">&#x27;mask_weared_incorrect&#x27;</span>] <span class="comment">#标签名，注意一定不要出错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span> / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span> / size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (x, y, w, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;./DataSets/annotations/%s.xml&#x27;</span> % (image_id), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;./DataSets/labels/%s.txt&#x27;</span> % (image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./DataSets/labels/&#x27;</span>): <span class="comment">#创建label文件夹</span></span><br><span class="line">        os.makedirs(<span class="string">&#x27;./DataSets/labels/&#x27;</span>)</span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">&#x27;./DataSets/ImageSets/Main/%s.txt&#x27;</span> % (image_set)).read().strip().split()</span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">&#x27;./DataSets/%s.txt&#x27;</span> % (image_set), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">&#x27;S:/pythonProjects/DSA/MaskDetection/yolov5/DataSets/images/%s.png\n&#x27;</span> % (image_id)) <span class="comment">#这里最好用全局路径</span></span><br><span class="line">        convert_annotation(image_id)</span><br><span class="line">    list_file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结束后会生成label文件夹和划分后三个数据集的具体文件路径<br><img src="https://gist.github.com/assets/67999981/4f5603ba-20b5-44dd-9b15-7c4bf35c66e0" alt="070502a65ef0476aa0f3753ecd9b8a22"><br>label中是转换出来的yolo格式数据集，分别为：标签类别，x：中心点x值/图片宽度，y:中心点y值/图片高度，w：目标框的宽度/图片宽度，h：目标框的高度/图片高度。<br><img src="https://gist.github.com/assets/67999981/a9df531b-6e4b-42c3-96ad-3afe9da732a6" alt="f4e1efbe222a4264a63c243fff049363"><br>详情可参考博客：<a href="https://qichenxi.blog.csdn.net/article/details/124234388?spm=1001.2014.3001.5506">YOLO数据集标注</a><br>而生成的三个txt相当于在之前划分的数据集上加上了路径，方便直接读取<br><img src="https://gist.github.com/assets/67999981/d78247c8-25f4-4b8c-8959-0e755a1bfe78" alt="950ecad811a442dc9ecc4538958b8a54"></p><h3 id="新建一个数据集配置文件"><a href="#新建一个数据集配置文件" class="headerlink" title="新建一个数据集配置文件"></a>新建一个数据集配置文件</h3><p>在data文件夹下新建一个mask.yaml文件,用来写数据集的一些配置，后续代码中也是通过读取yaml来读取数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据集的路径，推荐用绝对路径</span></span><br><span class="line">train: S:/pythonProjects/DSA/MaskDetection/yolov5/DataSets/train.txt</span><br><span class="line">val: S:/pythonProjects/DSA/MaskDetection/yolov5/DataSets/val.txt</span><br><span class="line">test: S:/pythonProjects/DSA/MaskDetection/yolov5/DataSets/test.txt</span><br><span class="line">nc: <span class="number">3</span> <span class="comment">#分类个数</span></span><br><span class="line">names: [<span class="string">&#x27;with_mask;&#x27;</span>, <span class="string">&#x27;without_mask&#x27;</span>, <span class="string">&#x27;mask_weared_incorrect&#x27;</span>]  <span class="comment">#标签</span></span><br></pre></td></tr></table></figure><p>至此，数据集制作就结束了。</p><h2 id="三、修改训练文件"><a href="#三、修改训练文件" class="headerlink" title="三、修改训练文件"></a>三、修改训练文件</h2><p>修改训练的一些参数（由于github上项目一直在更新，不同的版本的参数可能不同，比如我最新下载这个没有freeze这个冻结参数的选项了。但最重要的几个一直都有）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;yolov5s.pt&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial weights path&#x27;</span>) </span><br><span class="line">    <span class="comment">#权重文件，在第一次训练时，YOLOV5提供了几个不同的预训练模型，详情：https://github.com/ultralytics/yolov5</span></span><br><span class="line">    <span class="comment">#可以提前去官网下载，如果没有提前下载也没关系，这里只要写上预训练模型的名称，会自动调用项目中的download.sh去下载权重。</span></span><br><span class="line">    <span class="comment">#当然也可以不使用预训练，这里设置为空就行；</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cfg&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;yolov5s.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model.yaml path&#x27;</span>) </span><br><span class="line">    <span class="comment">#模型参数的配置文件，里面指定了一些参数信息和backbone的结构信息。需要跟选择的预训练模型一致。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;data/mask.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;data.yaml path&#x27;</span>) <span class="comment">#数据集地址</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hyp&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;data/hyp.scratch.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hyperparameters path&#x27;</span>) </span><br><span class="line">    <span class="comment">#模型训练的初始超参数文件，同样也提供了其他训练的超参数文件，可以自行选择 </span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">300</span>)</span><br><span class="line">    <span class="comment">#训练轮数，相当于0-299</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">16</span>, <span class="built_in">help</span>=<span class="string">&#x27;total batch size for all GPUs&#x27;</span>) </span><br><span class="line">    <span class="comment">#每次送入的样本量，数据集总数/batch_size就是每一轮总共要迭代的次数，越大效果越好。default=-1将时自动调节batchsize大小。</span></span><br><span class="line">    <span class="comment">#顺便说一下epoch、batchsize、iteration三者之间的联系 1、batchsize是批次大小，假如取batchsize=24，则表示每次训练时在训练集中取24个训练样本进行训练。 2、iteration是迭代次数，1个iteration就等于一次使用24（batchsize大小）个样本进行训练。 3、epoch：1个epoch就等于使用训练集中全部样本训练1次。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--img-size&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=[<span class="number">640</span>, <span class="number">640</span>], <span class="built_in">help</span>=<span class="string">&#x27;[train, test] image sizes&#x27;</span>) </span><br><span class="line">    <span class="comment">#resize的图片大小，一般来说640就够了，原图都比较大，如果直接上原图会导致过度消耗GPU资源，但如果选择比较大的模型，也要跟着上调。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--rect&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;rectangular training&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否采用矩阵推理的方式去训练模型；所谓矩阵推理就是不再要求你训练的图片是正方形了；矩阵推理会加速模型的推理过程，减少一些冗余信息。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, const=<span class="literal">True</span>, default=<span class="literal">False</span>, <span class="built_in">help</span>=<span class="string">&#x27;resume most recent training&#x27;</span>) </span><br><span class="line">    <span class="comment">#恢复训练：在之前训练的一个模型基础上继续训练，比如第一次训练了100个epoch，后续想在第一次训练的模型的基础上继续训练100个epoch则这里改成true。或者是训练中出现报错而中断，也可以用resume继续训练。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--nosave&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;only save final checkpoint&#x27;</span>) </span><br><span class="line">    <span class="comment">#是否只保存最后一轮训练的模型，这个参数不推荐，因为默认的是同时保存best和last</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--notest&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;only test final epoch&#x27;</span>)</span><br><span class="line">    <span class="comment">#只在最后一轮测试（这里说的应该是验证）；正常情况下每个epoch都会进行验证计算mAP，但如果开启了这个参数，那么就只在最后一轮上进行测试，不建议开启。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--noautoanchor&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;disable autoanchor check&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否禁用自动锚框；不建议改动，默认是开启的，自动锚点的好处是可以简化训练过程；yolov5中预先设定了一下锚定框，这些锚框是针对coco数据集的，其他目标检测也适用，可以在models/yolov5.文件中查看。</span></span><br><span class="line">    <span class="comment">#需要注意的是在目标检测任务中，一般使用大特征图上去检测小目标，因为大特征图含有更多小目标信息，因此大特征图上的anchor数值通常设置为小数值，小特征图检测大目标，因此小特征图上anchor数值设置较大。</span></span><br><span class="line">    <span class="comment">#训练开始前，会自动计算数据集标注信息针对默认锚定框的最佳召回率，当最佳召回率大于等于0.98时，则不需要更新锚定框；如果最佳召回率小于0.98，则需要重新计算符合此数据集的锚定框。 </span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--evolve&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;evolve hyperparameters&#x27;</span>)</span><br><span class="line">    <span class="comment">#遗传超参数进化；yolov5使用遗传超参数进化，提供的默认参数是通过在COCO数据集上使用超参数进化得来的。由于超参数进化会耗费大量的资源和时间，所以建议大家不要动这个参数。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--bucket&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;gsutil bucket&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否使用一些类似于阿里云之类的云盘来上传或下载东西，一般不用设置</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cache-images&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cache images for faster training&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否提前缓存图片到内存，以加快训练速度，推荐设置。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--image-weights&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use weighted image selection for training&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否启用加权图像策略，可以解决样本不平衡问题；开启后会对于上一轮训练效果不好的图片，在下一轮中增加一些权重；</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    <span class="comment">#训练设备，一般电脑只有一张显卡默认为0，但如果使用多卡的服务器进行训练，这里可以选择0,1,2,3分别对应卡号，多选就是多卡训练。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--multi-scale&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;vary img-size +/- 50%%&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否使用多尺度训练：多尺度训练是指设置几种不同的图片输入尺度，训练时每隔一定iterations随机选取一种尺度训练，这样训练出来的模型鲁棒性更强。</span></span><br><span class="line">    <span class="comment">#多尺度训练在比赛中经常可以看到他身影，是被证明了有效提高性能的方式。输入图片的尺寸对检测模型的性能影响很大，在基础网络部分常常会生成比原图小数十倍的特征图，导致小物体的特征描述不容易被检测网络捕捉。通过输入更大、更多尺寸的图片进行训练，能够在一定程度上提高检测模型对物体大小的鲁棒性。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--single-cls&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;train multi-class data as single-class&#x27;</span>)</span><br><span class="line">    <span class="comment">#单分类；如果你的任务只需要检测一个类别则这里可以设置为True</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--adam&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use torch.optim.Adam() optimizer&#x27;</span>)</span><br><span class="line">    <span class="comment">#选择优化器；比如SGD，Adam，AdamW等等，默认为adam（不同版本的代码默认不一样）。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--sync-bn&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use SyncBatchNorm, only available in DDP mode&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否开启跨卡同步BN；开启参数后即可使用 SyncBatchNorm多GPU 进行分布式训练</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--local_rank&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;DDP parameter, do not modify&#x27;</span>)</span><br><span class="line">    <span class="comment">#DDP参数，不要修改</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--workers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">8</span>, <span class="built_in">help</span>=<span class="string">&#x27;maximum number of dataloader workers&#x27;</span>)</span><br><span class="line">    <span class="comment">#dataloader使用多线程来加载数据，提前加载未来会用到的batch数据，详情可参考：https://www.cnblogs.com/hesse-summer/p/11343870.html</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--project&#x27;</span>, default=<span class="string">&#x27;runs/train&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save to project/name&#x27;</span>)</span><br><span class="line">    <span class="comment">#训练文件的保存路径，不用修改，项目中默认的保存结构非常好看。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--entity&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;W&amp;B entity&#x27;</span>)</span><br><span class="line">    <span class="comment">#在线可视化工具，类似于tensorboard，不推荐使用，yoloV5中同时使用了Tensorboard和Wandb两个在线可视化工具已经非常冗余了。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, default=<span class="string">&#x27;exp&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save to project/name&#x27;</span>)</span><br><span class="line">    <span class="comment">#每一轮迭代的文件夹名称，这里不用修改，后续训练会自动增加：exp,exp2,exp3,exp4...</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exist-ok&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;existing project/name ok, do not increment&#x27;</span>)</span><br><span class="line">    <span class="comment">#每次预测模型的结果是否保存在原来的文件夹；如果指定了这个参数的话，那么本次预测的结果还是保存在上一次保存的文件夹里；如果不指定就是每次预测结果保存一个新的文件夹下。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--quad&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;quad dataloader&#x27;</span>)</span><br><span class="line">    <span class="comment">#在比默认640 大的数据集上训练效果更好，副作用是在 640 大小的数据集上训练效果可能会差一些，详情可参考：https://blog.csdn.net/a18838956649/article/details/119020699</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--linear-lr&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;linear LR&#x27;</span>)</span><br><span class="line">    <span class="comment">#线性学习率，有的项目是cos-lr，开启后学习率会动态的变化，推荐开启。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--upload_dataset&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Upload dataset as W&amp;B artifact table&#x27;</span>)</span><br><span class="line">    <span class="comment">#是否上传数据集到wandb中，如果想要更好的看到数据集的情况可以开启。</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--bbox_interval&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;Set bounding-box image logging interval for W&amp;B&#x27;</span>)</span><br><span class="line">    <span class="comment">#设置界框图像记录间隔，也是和wandb有关，一般用不到</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save_period&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;Log model after every &quot;save_period&quot; epoch&#x27;</span>)</span><br><span class="line">    <span class="comment">#用于设置多少个epoch保存一下checkpoint；</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--artifact_alias&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;latest&quot;</span>, <span class="built_in">help</span>=<span class="string">&#x27;version of dataset artifact to be used&#x27;</span>)</span><br><span class="line">    <span class="comment">#要使用的数据集工件的版本，暂时还没看到这里的一些先关说明。</span></span><br><span class="line">    opt = parser.parse_args()</span><br></pre></td></tr></table></figure><p>其中action=’store_true’的参数默认是不开启的，在shell只需要键入这个参数的名称，不需要加值就可以开启，这类一般是True或False的选项，如果想在编译器中使用这个参数，则可以加一个default=True<br>推荐参数：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py <span class="literal">--weights</span> yolov5s.pt <span class="literal">--cfg</span> yolov5s.yaml <span class="literal">--data</span> <span class="keyword">data</span>/mask.yaml <span class="literal">--epochs</span> <span class="number">500</span> <span class="literal">--cache-images</span> <span class="literal">--image-weights</span> <span class="literal">--multi-scale</span> <span class="literal">--linear-lr</span></span><br></pre></td></tr></table></figure><h2 id="四、训练中遇到的一些报错问题"><a href="#四、训练中遇到的一些报错问题" class="headerlink" title="四、训练中遇到的一些报错问题"></a>四、训练中遇到的一些报错问题</h2><h3 id="编码报错"><a href="#编码报错" class="headerlink" title="编码报错"></a>编码报错</h3><p>‘gbk’ codec can’t decode byte 0xaf in position 15: illegal multitype sequence<br><img src="https://gist.github.com/assets/67999981/16d78011-133d-44fc-873f-7215438a676f" alt="346b47e6658244aeafcd12b2723c3189"><br>解决方案：在trian.py中这个位置的open中加上utf-8的编码，test.py中也有这个错误，可以一起加上，可能是个bug，不知道官方为什么还没改过来。<br><img src="https://gist.github.com/assets/67999981/112ccbbf-75f4-47d6-b37d-793ef2ef52d7" alt="9e5c00a5395f45c0867b7a493ae9898d"></p><h3 id="找不到数据集或标签"><a href="#找不到数据集或标签" class="headerlink" title="找不到数据集或标签"></a>找不到数据集或标签</h3><p>AssertionError: No trains in D:\yolov5\train_data\train.cache. Can not train without trains.<br>AssertionError: No labels in D:\yolov5\train_data\train.cache. Can not train without labels.<br>这个错误很常见，根本原因还是数据集配置有问题，首先检查你数据集的data.yaml里面所有路径是否正确，其次检查train.txt、test.txt里面的路径是否正确，如果这些都没问题的话那就改接下来这处地方：<br>在utils里面的datasets.py中搜索define找到这个函数，将这里的images改成和你datasets目录下存储图片的文件夹的名字一样，比如你存储图片的文件夹叫JPEGImages，那么这里也要改成JPEGImages<br><img src="https://gist.github.com/assets/67999981/b812f3f0-a24d-40f7-86f9-f30a6a6d0c15" alt="e53281ac6eed42d8b89d2ca86d6388a0"><br><img src="https://gist.github.com/assets/67999981/0717586e-c156-42c8-85a1-9d8b1e7326b7" alt="1a4bc59eb2244b5d9abf6d809a7b486f"></p><h3 id="libiomp5md-dll错误"><a href="#libiomp5md-dll错误" class="headerlink" title="libiomp5md.dll错误"></a>libiomp5md.dll错误</h3><p>这个报错是由于anaconda下存在多个libiomp5md.dll文件导致的，有两种解决方法：</p><ol><li>删除anaconda对应环境中Libary文件夹下libiomp5md.dll文件，再运行项目时会自动生成一个libiomp5md.dll文件</li><li>在train.py中加上这句话，允许多个lib文件同时运行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>]=<span class="string">&#x27;TRUE&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="libpng-warning-iCCP"><a href="#libpng-warning-iCCP" class="headerlink" title="libpng warning: iCCP"></a>libpng warning: iCCP</h3>libpng warning: iCCP: known incorrect sRGB profile<br>这个错误可能是由于一些图片中存在错误格式，且anaconda的libpng版本过高导致的，解决的方法大致有两种：</li><li>替换掉anaconda中的库，详情可以查看这篇文章并且他提供了一个不会报错的版本。<br><a href="https://blog.csdn.net/banyueju/article/details/91553248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">替换anaconda中的libpng库</a></li><li>将所有数据集中的图片重新编码一下，代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line">path = <span class="string">r&quot;./images/&quot;</span>  <span class="comment">#path后面记得加 /</span></span><br><span class="line">fileList = os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(fileList):</span><br><span class="line">    image = io.imread(path+i)  <span class="comment"># image = io.imread(os.path.join(path, i))</span></span><br><span class="line">    image = cv2.cvtColor(image, cv2.COLOR_RGBA2BGRA)</span><br><span class="line">    cv2.imencode(<span class="string">&#x27;.png&#x27;</span>,image)[<span class="number">1</span>].tofile(path+i)</span><br></pre></td></tr></table></figure><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><p>测试文件为test.py，大部分参数解释和train是一样的，其实train.py中的验证代码用的就是test.py中的内容，这里做测试的话只需要把–task这个参数改成test就行<br><img src="https://gist.github.com/assets/67999981/3e5221f3-3aee-4d62-bad8-ee4b14cf36dd" alt="cf8a682ab41c42b78f06ef3cb36b34ef"></p><h2 id="六、训练、测试结果"><a href="#六、训练、测试结果" class="headerlink" title="六、训练、测试结果"></a>六、训练、测试结果</h2><p>在训练、测试结束后会生成很多文件，这里来大致解析一下这些文件分别是什么意思：<br><img src="https://gist.github.com/assets/67999981/7ac8fa2c-433d-4308-a470-1a4dea4e490b" alt="aa6e8ff4d7f24da8b5a4419331d8fc4b"><br>我的保存路径在train下面，exp就是第一轮训练的结果，其中weights文件夹下面是训练生成的权重文件，也可以说是模型，best.pt是表现最好的模型，last.pt是最后一轮生成的模型<br><strong>比较重要的是result.png</strong>里面是模型整体训练的一个情况，从这里能看到绝大部分信息。<br>接下来是一些分类问题的评分指标：confusion_martix.png、F1_curve.png、P_curve.png、R_curve.png、PR_curve.png<br>两个参数文件：hyp.yaml/opt.yaml分别是模型的初始参数以及训练的初始超参数<br>三个events….为tensorboard的日志文件<br>train_batch\test_batch分别为训练和测试前三个batch的结果后缀为labels为标签，pred为预测的情况，可以从这里大致看出模型的一个实际效果。</p><h2 id="七、检测"><a href="#七、检测" class="headerlink" title="七、检测"></a>七、检测</h2><p>检测文件为detect.py，只需要提供你想要检测的内容，包括图片、视频、调用摄像头，这个参数为<br>–source，给一个路径或者0，0为调用摄像头<br><img src="https://gist.github.com/assets/67999981/2c178c84-0eb1-48c4-8a5e-13b0b8258471" alt="a1b003ab667d454798917e31b812f871"><br>这是我实时检测的效果，可以说还不错<br><img src="https://gist.github.com/assets/67999981/5a5ae0bd-4856-4970-a02c-20546711bb3c" alt="aaa71155881145de8db4da6111cb5df4"></p><p>这次关于YOLOV5的训练步骤就结束了，如有错误请及时指正，后续还会继续更新一些相关的知识，感谢观看！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://blog.csdn.net/xiaosangtongxue/article/details/124083959">https://blog.csdn.net/xiaosangtongxue/article/details/124083959</a><br><a href="https://zhuanlan.zhihu.com/p/549163975">https://zhuanlan.zhihu.com/p/549163975</a><br><a href="https://blog.csdn.net/banyueju/article/details/91553248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">https://blog.csdn.net/banyueju/article/details/91553248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</a><br><a href="https://qichenxi.blog.csdn.net/article/details/124234388?spm=1001.2014.3001.5506">https://qichenxi.blog.csdn.net/article/details/124234388?spm=1001.2014.3001.5506</a><br><a href="https://blog.csdn.net/qq_44785351/article/details/127465183?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_44785351/article/details/127465183?spm=1001.2014.3001.5502</a><br><a href="https://blog.csdn.net/banyueju/article/details/91553248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">https://blog.csdn.net/banyueju/article/details/91553248?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YOLOV5介绍&quot;&gt;&lt;a href=&quot;#YOLOV5介绍&quot; class=&quot;headerlink&quot; title=&quot;YOLOV5介绍&quot;&gt;&lt;/a&gt;YOLOV5介绍&lt;/h1&gt;&lt;p&gt;YOLOV5是目前最火热的目标检测算法之一。YOLOV5为一阶段检测算法因此它的速度非常之快</summary>
      
    
    
    
    
    <category term="Deep learning" scheme="https://stephen-smj.tech/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Wandb安装与配置</title>
    <link href="https://stephen-smj.tech/2022/10/22/Wandb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://stephen-smj.tech/2022/10/22/Wandb%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2022-10-22T10:27:52.000Z</published>
    <updated>2024-07-07T09:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wandb介绍"><a href="#Wandb介绍" class="headerlink" title="Wandb介绍"></a>Wandb介绍</h2><p>wandb(Weights &amp; Biases)是一个类似于tensorboard的极度丝滑的在线模型训练可视化工具<br>wandb这个库可以帮助我们跟踪实验，记录运行中的超参数和输出指标，可视化结果并共享结果。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="首先安装Wandb"><a href="#首先安装Wandb" class="headerlink" title="首先安装Wandb"></a>首先安装Wandb</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wandb</span><br></pre></td></tr></table></figure><h3 id="网页端注册账号"><a href="#网页端注册账号" class="headerlink" title="网页端注册账号"></a>网页端注册账号</h3><p>按照提示注册一个账号并登录<br><img src="https://gist.github.com/assets/67999981/a20d271f-a090-4757-a142-88e347f509f5" alt="cdd463f4cbf44560850afa316db92949"></p><h3 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h3><p>在你的项目的shell中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wandb login</span><br></pre></td></tr></table></figure><p>然后去网页端复制你的秘钥<br><img src="https://gist.github.com/assets/67999981/a1fb0bdd-6ae9-45e9-b5ac-ce98adfd87b0" alt="cd9d017879624e378a357c08d2433760"><br>将API keys键入到上面login的命令行中<br><img src="https://gist.github.com/assets/67999981/3a669edf-db88-48a2-b807-232e4d209a8f" alt="7366a048024642d6a3d442db680262b9"><br>这样就生成了配置文件<br>如果你是跑别人的代码的话这样配置就可以用，至于详细使用方法后续继续更新……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Wandb介绍&quot;&gt;&lt;a href=&quot;#Wandb介绍&quot; class=&quot;headerlink&quot; title=&quot;Wandb介绍&quot;&gt;&lt;/a&gt;Wandb介绍&lt;/h2&gt;&lt;p&gt;wandb(Weights &amp;amp; Biases)是一个类似于tensorboard的极度丝滑的</summary>
      
    
    
    
    
    <category term="Deep learning" scheme="https://stephen-smj.tech/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>pip安装与conda安装的区别</title>
    <link href="https://stephen-smj.tech/2022/09/15/pip%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E4%B8%8Econda%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://stephen-smj.tech/2022/09/15/pip%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E4%B8%8Econda%E5%AE%89%E8%A3%85%E5%88%A0%E9%99%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-09-15T09:04:13.000Z</published>
    <updated>2024-07-07T08:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>conda安装和删除是在当前环境下安装和删除，而pip是在本地上安装和删除，因此所有环境都会有。<br>如图是使用pip在一个环境安装opencv后，发现其他环境也有了相同的opencv。<br><img src="https://gist.github.com/assets/67999981/f2760f0c-c1f5-4084-8993-1d48bce14763" alt="dd43f6fbaba24e79a7af95ee9e265ba1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;conda安装和删除是在当前环境下安装和删除，而pip是在本地上安装和删除，因此所有环境都会有。&lt;br&gt;如图是使用pip在一个环境安装opencv后，发现其他环境也有了相同的opencv。&lt;br&gt;&lt;img src=&quot;https://gist.github.com/asset</summary>
      
    
    
    
    
    <category term="Python" scheme="https://stephen-smj.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Sklearn中的confusion_matrix排列方式与计算</title>
    <link href="https://stephen-smj.tech/2022/05/12/Sklearn%E4%B8%AD%E7%9A%84confusion_matrix%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%A1%E7%AE%97/"/>
    <id>https://stephen-smj.tech/2022/05/12/Sklearn%E4%B8%AD%E7%9A%84confusion_matrix%E6%8E%92%E5%88%97%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%A1%E7%AE%97/</id>
    <published>2022-05-12T08:44:08.000Z</published>
    <updated>2024-07-07T09:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个预测和真实值，打印出confusion matrix和精确度、召回率<img src="https://gist.github.com/assets/67999981/204ebb53-6d5f-4bf7-88b4-78135443bc6d" alt="01b7dd645d9545359b6e13fc2aff59c4"><br>经过推导后，发现0代表Negative，1代表Postive，矩阵的横轴为预测，纵轴为真实值，如下图所示：<br><img src="https://gist.github.com/assets/67999981/29d1bd88-e21c-4337-9597-1b69f1f25288" alt="2f4bc6fb7a114946970851463b990390"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;定义一个预测和真实值，打印出confusion matrix和精确度、召回率&lt;img src=&quot;https://gist.github.com/assets/67999981/204ebb53-6d5f-4bf7-88b4-78135443bc6d&quot; alt=&quot;01b7dd</summary>
      
    
    
    
    
    <category term="Machine learning" scheme="https://stephen-smj.tech/tags/Machine-learning/"/>
    
  </entry>
  
</feed>
